#Tariq Thomas 
#Student ID is @02845739
# N = 27 + (02845739 % 10) = 36
# M = N - 10 = 26
   .data
 # input_prompt: .asciiz "Enter an input:"
  long_Inpt:    .asciiz "Input is too long."
  empty_Inpt:   .asciiz "Input is empty.\n"
  buffer:       .space  500
 msg_newline:  .asciiz "\n"
  invalid_Inpt: .asciiz "Invalid number for base-36 number.\n"

  .text
main:
# li $v0, 4
# la $a0, input_prompt
# syscall

 li $v0, 8       # system call 8 = read input

 la $a0, buffer  # load byte space into address
 li $a1, 500     # byte space for string
syscall

 la $a0, buffer          # load read string address
 jal process_user_str    # function to process user input

 j exit_program

process_user_str:
 addiu $sp, $sp, -12     # create space on stack
 sw    $ra, 8($sp)       # save $ra on stack

 lb $t0, 0($a0)
 li $t1, 10              # if 1st char of string is 'enter key (=10)', its empty string
 beq $t0, $t1, print_empty_string

# now checking valid input ($a0 has input)

    jal is_valid_input

    # now remove leading whitespaces
    la $t0, buffer          # t0 <- str[0]

remove_leading_white_spaces:
li $t1, ' '
    lb $t2, 0($t0)          # t2 <- str[i]  
    beq $t1, $t2, continue_removing_white_spaces

    # else, non space character. break. t0 is pointing to non space char
    j continue.process
   
   continue_removing_white_spaces:
    addiu $t0, $t0, 1
    j remove_leading_white_spaces

    continue.process:
    li $t1, 0           # count = 0 (leading white spaces are removed)
     move $t4, $t0       # save t4: points to 'start' of string 
    j count 

count:
    lb $t2, 0($t0)
    li $t3, 10 
    bne $t2, $t3, incr_len
    j continue1

incr_len:
	addiu $t1, $t1, 1       # increment count
	addiu $t0, $t0, 1       # increment pointer
    	j count

continue1:
    # now t0 is at the end of string. Remove trailing whitespaces, and reduce len
    addiu $t0, $t0, -1

remove_trailing_spaces:
    lb $t2, 0($t0)
    li $t3, ' '
    bne $t2, $t3, continue2
    addiu $t1, $t1, -1     # subtract length
    addiu $t0, $t0, -1     # bring pointer back
    j remove_trailing_spaces
    
    continue2:
    li $t2, 4
    bgt $t1, $t2, long_Inpt  # if len(str.leading_space_removed) > 4 print long input
    j print_base_n
	
    print_base_n:
    addiu $t0, $t0, 1
    li $t2, 10
    sb $t2, 0($t0)          # mark end of string

    # now print string from [$t4 to $t0]. Note, the string is valid at this point.
    # calculate decimal counterpart of this base-36 number
    
    


   
    
   
    
   
     
   
    j print_digit
    
    exit_process:
    lw    $v0, ($sp)        # store return values in v0, v1
    lw    $v1, 4($sp)
    lw    $ra, 8($sp)       # reload saved return address
    addiu $sp, $sp, 12      # reset stack pointer
    jr    $ra               # return to calling location


print_empty_string:
    li $v0, 4
    la $a0, empty_Inpt
    syscall
    j exit_program
    
 print_long_input:
    li $v0, 4
    la $a0, long_Inpt
    syscall
    j exit_program
    
    


# M = 26, N = 36. So allowed chars are 0-9, a-z, A-Z, ' '
is_valid_input:
    move $t0, $a0                       # t0 <- string[0]
    
    loop.valid:
    li $t1, ' '
    lb $t2, 0($t0)                      # t2 <- str[i]
    beq $t1, $t2, valid.continue              # str[i] = ' '. Valid. Check further

    li $t1, 10
beq $t1, $t2, is_valid              # str[i] = enter key (end of string)

    li $t1, '0'
    blt $t2, $t1, print_invalid_input   # str[i] < '0'

    li $t1, '9'
    ble $t2, $t1, valid.continue              # str[i] > '0' and str[i] <= '9'
    
     li $t1, 'A'
    blt $t2, $t1, print_invalid_input

    li $t1, 'Z'
    ble $t2, $t1, valid.continue

    li $t1, 'a'
     blt $t2, $t1, print_invalid_input

    li $t1, 'z'
    ble $t2, $t1, valid.continue

    j print_invalid_input

   valid.continue:
	addiu $t0, $t0, 1                   # increment array address
	j loop.valid

  is_valid:
  jr $ra
  
  print_invalid_input:
    li $v0, 4
    la $a0, invalid_Inpt
    syscall
    j exit_program

exit_program:
    li $v0, 10              # exit program
    syscall
